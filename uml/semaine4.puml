@startuml

skinparam AttributeIconSize 0
skinparam classFontStyle Bold
skinparam style strictuml
hide empty members

abstract class Affichage <<abstract>>{
  - {static} m_langue: Langue
  + {static} demandeNbCreationJoueur(): String
  + {static} subirAttaquePerso(String, int, int, String)
  + {static} demandeMonstreSymbol(): String
  + {static} demandeMonstreClasseArmure(): String
  + {static} getActionMaitreJeu(): String
  + {static} lancerDe(int)
  + {static} nomRoublard(): String
  + {static} demandeMonstrePortee(): String
  + {static} caseDestination(): String
  + {static} attaqueAllie()
  + {static} demandeLignesDonjon(): String
  + {static} caseHorsPortee()
  + {static} demandeMonstrePv(): String
  + {static} nomHarnois(): String
  + {static} joueurInexistant()
  + {static} aucuneSelection(String)
  + {static} nomBaton(): String
  + {static} contenuInventaire(ArrayList<Equipement>): String
  + {static} nomGuerrier(): String
  + {static} personnageInexistant()
  + {static} choisirCaseDonjon(String)
  + {static} afficherTour(int, int, String[][], int, ArrayList<Personnage>, int, Personnage): String
  + {static} caseJoueurAjout(String): String
  + {static} nomNain(): String
  + {static} demandeNbCreationObjet(String): String
  + {static} attaquer(Boolean, int, int, int)
  + {static} demandeNbDegatInfliger(): String
  + {static} mjIntervientPas()
  + {static} caseInexistante()
  + {static} infligerDegatsSuccesPerso(int, String, int)
  + {static} demandeNbCreationObstacle(): String
  + {static} nomDemiPlate(): String
  + {static} selectionPersonnage(): String
  + {static} armeInexistante()
  + {static} nomArbalete(): String
  + {static} nomArmeMagique(): String
  + {static} choisirEquipement(ArrayList<Equipement>): String
  + {static} nomFronde(): String
  + {static} demandeMonstreDexterite(): String
  + {static} nomHumain(): String
  + {static} demandeMonstreForce(): String
  + {static} demandeMonstreDeFace(): String
  + {static} nomArc(): String
  + {static} getInfosJoueur(String, String, String, int, int): String
  + {static} sePresenterJoueur(String, String, String): String
  + {static} choisirLangue()
  + {static} toStringArmure(int, boolean): String
  + {static} nomElf(): String
  + {static} maitreDuJeu(): String
  + {static} nomMasse(): String
  + {static} selectionJoueur(): String
  + {static} demandeDonjonDefaut(): String
  + {static} demandeNomJoueur(): String
  + {static} getActionPerso(String, int): String
  + {static} demanderEquiperDonjon(): String
  + {static} afficheCreationJoueur()
  + {static} toStringArme(int, int, int, boolean): String
  + {static} porteeAttaque(int)
  + {static} nomEpeeLongue(): String
  + {static} creerEquipementDonjon(): String
  + {static} demandeMonstreVitesse(): String
  + {static} nomBoogieWoogie(): String
  + {static} demandeNbCreationDonjon(): String
  + {static} demandeRace(): String
  + {static} demandeColonnesDonjon(): String
  + {static} aucunEquipement()
  + {static} nomMagicien(): String
  + {static} afficheCreationDonjon(int)
  + {static} nomHalfelin(): String
  + {static} memePersonnage()
  + {static} toStringJoueur(String, String, String, int, int, int, int, int, ArrayList<Equipement>, Armure, Arme): String
  + {static} mjFinTour(String)
  + {static} nomEpee2Mains(): String
  + {static} intervalleEntier(int, int): String
  + {static} confimationCreationJoueur(int, String)
  + {static} demandeNbCreationMonstre(): String
  + {static} cibleHorsPortee(String)
  + {static} nomArmureEcailles(): String
  + {static} demandeNbCreationEquipement(): String
  + {static} demandeLangue(): String
  + {static} getActionJoueur(String, int): String
  + {static} nomRapiere(): String
  + {static} nomClerc(): String
  + {static} caseInvalide()
  + {static} demandeClasse(): String
  + {static} nbCasesDeplacement(int)
  + {static} choisirSort(ArrayList<Sort>): String
  + {static} demandeMonstreEspece(): String
  + {static} recupEquipement(String)
  + {static} mauvaisFormatCase()
  + {static} demandeElement(String): String
  + {static} afficherPlateauDonjon(int, int, String[][]): String
  + {static} guerirPerso(String, int, int, int)
  + {static} caseObstacleAjout(): String
  + {static} nomGuerison(): String
  + {static} nomCotteDeMailles(): String
  + {static} demandePersonnageNumero(int): String
  + {static} infligerDegatsEchecPerso(int, String)
  + {static} caseDeplacement(): String
  + {static} afficherLangueChoisie()
  + {static} afficheMsgFinDonjon(EtatDonjon)
  + {static} getInfosPerso(String, int, int): String
  + {static} aucuneArmeEquipee()
  + {static} peutPasLancerSort(Personnage personnage)
  + {static} appuyerSurEntree()
}
class Anglais implements Langue{
  + <<create>> Anglais()
  + guerirPerso(String, int, int, int)
  + donjon(): String
  + selectionJoueur(): String
  + demandeMonstreClasseArmure(): String
  + subirAttaquePerso(String, int, int, String)
  + demandeNbCreationEquipement(): String
  + demandeNbCreationMonstre(): String
  + demandeMonstreDeFace(): String
  + demandePersonnageNumero(int): String
  + sePresenterJoueur(String, String, String): String
  + nomCotteDeMailles(): String
  + demandeDonjonDefaut(): String
  + intervalleEntier(int, int): String
  + demandeMonstreSymbol(): String
  + toStringJoueur(String, String, String, int, int, int, int, int, ArrayList<Equipement>, Armure, Arme): String
  + nomDemiPlate(): String
  + porteeAttaque(int)
  + nomEpeeLongue(): String
  + demandeColonnesDonjon(): String
  + getInfosPerso(String, int, int): String
  + personnageInexistant()
  + maitreDuJeu(): String
  + nomNain(): String
  + caseObstacleAjout(): String
  + demandeNbCreationObjet(String): String
  + caseInexistante()
  + toStringArme(int, int, int, boolean): String
  + demandeMonstrePv(): String
  + creerEquipementDonjon(): String
  + getInfosJoueur(String, String, String, int, int): String
  + nbCasesDeplacement(int)
  + aucuneArmeEquipee()
  + confimationCreationJoueur(int, String)
  + nomArmeMagique(): String
  + recupEquipement(String)
  + nomHalfelin(): String
  + attaqueAllie()
  + mjFinTour(String)
  + infligerDegatsSuccesPerso(int, String, int)
  + choisirCaseDonjon(String)
  + afficheMsgFinDonjon(EtatDonjon)
  + ouiOuNon(boolean): String
  + aucuneSelection(String)
  + infligerDegatsEchecPerso(int, String)
  + caseJoueurAjout(String): String
  + demandeRace(): String
  + caseDestination(): String
  + nomGuerrier(): String
  + nomArc(): String
  + afficheCreationJoueur()
  + demandeMonstreDexterite(): String
  + nomClerc(): String
  + caseDeplacement(): String
  + nomHumain(): String
  + demandeNbCreationObstacle(): String
  + demandeNbCreationJoueur(): String
  + toStringArmure(int, boolean): String
  + nomRapiere(): String
  + joueurInexistant()
  + afficheCreationDonjon(int)
  + nomGuerison(): String
  + mjIntervientPas()
  + demandeNbDegatInfliger(): String
  + cibleHorsPortee(String)
  + contenuInventaire(ArrayList<Equipement>): String
  + demandeMonstreForce(): String
  + attaquer(Boolean, int, int, int)
  + nomArbalete(): String
  + caseInvalide()
  + demandeMonstreVitesse(): String
  + caseHorsPortee()
  + nomMagicien(): String
  + demandeClasse(): String
  + getActionMaitreJeu(): String
  + armeInexistante()
  + nomFronde(): String
  + demandeMonstreEspece(): String
  + demandeMonstrePortee(): String
  + lancerDe(int)
  + demandeElement(String): String
  + getActionPerso(String, int): String
  + demanderEquiperDonjon(): String
  + nomArmureEcailles(): String
  + selectionPersonnage(): String
  + aucunEquipement()
  + nomHarnois(): String
  + nomBaton(): String
  + demandeNomJoueur(): String
  + demandeLangue(): String
  + nomBoogieWoogie(): String
  + afficherLangueChoisie()
  + nomEpee2Mains(): String
  + nomMasse(): String
  + getActionJoueur(String, int): String
  + getNomAttribut(Boolean): String
  + memePersonnage()
  + toString(): String
  + demandeLignesDonjon(): String
  + nomElf(): String
  + choisirEquipement(): String
  + afficherLegendePlateau(): String
  + demandeNbCreationDonjon(): String
  + choisirSort(): String
  + mauvaisFormatCase()
  + nomRoublard(): String
  + peutPasLancerSort(Personnage personnage)
  + appuyerSurEntree()
}
class Arbalete extends Arme{
  + <<create>> Arbalete()
}
class Arc extends Arme{
  + <<create>> Arc()
}
class Arme extends Equipement{
  - m_portee: int
  - m_bonus: int
  - m_amplitudeDegats: int
  - m_nbLance: int
  + <<create>> Arme(String, int, int, boolean, int)
  + <<create>> Arme(String, int, int, boolean)
  + getBonus(): int
  + estArmeDistance(): boolean
  + toString(): String
  + attaque(): int
  + getPortee(): int
  + getAmplitudeDegats(): int
  + addBonus(int)
}
class ArmeMagique extends Sort{
  + <<create>> ArmeMagique()
  + lancer(ArrayList<Personnage>): boolean
}
class Armure extends Equipement{
  - m_classeArmure: int
  + <<create>> Armure(String, int, boolean)
  + toString(): String
  + getClasseArmure(): int
}
class ArmureEcailles extends Armure{
  + <<create>> ArmureEcailles()
}
class Baton extends Arme{
  + <<create>> Baton()
}
class BoogieWoogie extends Sort{
  + <<create>> BoogieWoogie()
  + lancer(ArrayList<Personnage>): boolean
}
class CasePlateau {
  - m_case: String
  - m_colonne: int
  - m_ligne: int
  + <<create>> CasePlateau(String)
  + getColonne(): int
  + estValide(String[][], TypeCase): boolean
  + getLigne(): int
  - estBonFormat(): boolean
  - convertirString()
  - estChiffre(char): boolean
  - estLettre(char): boolean
  - estNombre(String): boolean
}
abstract class Classe <<abstract>>{
  - m_nom: String
  - m_equipements: ArrayList<Equipement>
  - m_pv: int
  - m_sorts: ArrayList<Sort>
  + <<create>> Classe(String, int, ArrayList<Equipement>, ArrayList<Sort>)
  + <<create>> Classe(String, int, ArrayList<Equipement>)
  + getSorts(): ArrayList<Sort>
  + getEquipements(): ArrayList<Equipement>
  + toString(): String
  + getPv(): int
}
class Clerc extends Classe{
  - m_sorts: ArrayList<Sort>
  - m_equipements: ArrayList<Equipement>
  + <<create>> Clerc()
}
class CotteDeMailles extends Armure{
  + <<create>> CotteDeMailles()
}
abstract class De <<abstract>>{
  + {static} lance(int): int
}
abstract class Demande <<abstract>>{
  + {static} getJoueurs(ArrayList<Personnage>): ArrayList<Joueur>
  + {static} demanderJoueurs(ArrayList<Joueur>, int): ArrayList<Joueur>
  + {static} demandeEntier(int, int, String): int
  + {static} demandeString(String, int): String
  + {static} demanderPersonnagesWithoutSelf(ArrayList<Personnage>, int, Personnage): ArrayList<Personnage>
  + {static} demanderPersonnages(ArrayList<Personnage>, int): ArrayList<Personnage>
  + {static} demanderPersonnagesFilter(ArrayList<Personnage>, int): ArrayList<Personnage>
}
class DemiPlate extends Armure{
  + <<create>> DemiPlate()
}
class Donjon {
  - m_casesLibres: int
  - m_numero: int
  - m_lignes: int
  - m_tour: int
  - m_plateau: String[][]
  - m_equipements: ArrayList<Equipement>
  - m_personnages: ArrayList<Personnage>
  - m_nbJoueurs: int
  - m_colonnes: int
  + <<create>> Donjon(int, ArrayList<Joueur>)
  + <<create>> Donjon(int, int, int, ArrayList<Joueur>)
  + <<create>> Donjon(int, int, int, ArrayList<Joueur>, boolean)
  + toString(): String
  + jouerDonjon(): boolean
  + tryLancerSort(Personnage): boolean
  + creerDonjon(int, ArrayList<Joueur>): Donjon
  + getNbPerso(TypePersonnage): int
  + recupererJoueurs(): ArrayList<Joueur>
  - tryRamasserEquipement(Personnage)
  - ajouterPersonnages(ArrayList<Personnage>)
  - updatePosPersos()
  - ajouterEquipements(ArrayList<Equipement>)
  - affichageTour(Personnage): String
  - getEquipement(Pion): Equipement
  - infligerDegats()
  - choisirCase(String, TypeCase): CasePlateau
  - creerObstacles()
  - tryAttaque(Personnage): boolean
  - testFinDonjon(): EtatDonjon
  - genererDefaut()
  - remplirPlateau()
  - remplir()
  - tryDeplacement(Personnage): boolean
  - interventionMaitrejeu(Personnage)
  - testMortPerso(Personnage)
  - lancerInitiative(ArrayList<Personnage>)
  - ajouterObstacle(CasePlateau)
  - deplacerPerso(Personnage, CasePlateau)
  - tourDonjon(): EtatDonjon
  - creerEquipements()
  - ajouterPersonnage(Personnage, CasePlateau)
  - updateCase(Pion)
  - tourPerso(Personnage): EtatDonjon
  - formatSymbol(String): String
  - ajouterEquipement(Equipement, CasePlateau)
  - getNbMaxCreation(): int
  - positionnerJoueurs()
  - getActionMaitreJeu(): int
  - triParInitiative(ArrayList<Personnage>)
  - creerMonstres()
  - tryEquiper(Personnage): boolean
  - getPersoVivants(ArrayList<Personnage>): ArrayList<Personnage>
}
interface Effet << interface >> {
  + appliquer(Personnage)
  + retirer(Personnage)
}
class EffetForce implements Effet{
  - m_valeur: int
  + <<create>> EffetForce(int)
  + retirer(Personnage)
  + appliquer(Personnage)
}
class EffetVitesse implements Effet{
  - m_valeur: int
  + <<create>> EffetVitesse(int)
  + appliquer(Personnage)
  + retirer(Personnage)
}
abstract class EffetsStandards <<abstract>>{
  + {static} ARMURE_LOURDE: ArrayList<Effet>
  + {static} ARME_LOURDE: ArrayList<Effet>
  + {static} SANS_EFFET: ArrayList<Effet>
}
class Elf extends Race{
  + <<create>> Elf()
}
class Epee2Mains extends Arme{
  + <<create>> Epee2Mains()
}
class EpeeLongue extends Arme{
  + <<create>> EpeeLongue()
}
abstract class Equipement <<abstract>>{
  # m_estLourd: boolean
  - m_type: TypeEquipement
  - m_effets: ArrayList<Effet>
  - m_nom: String
  - m_pion: Pion
  + <<create>> Equipement(String, boolean, TypeEquipement, ArrayList<Effet>)
  + getPion(): Pion
  + toString(): String
  + retirerEffets(Personnage)
  + getType(): TypeEquipement
  + appliquerEffets(Personnage)
  + pasDefinie(): boolean
  + setPion(int, int)
}
enum EtatDonjon << enumerate >> {
  EN_COURS
  DEFAITE
  VICTOIRE
}
class Francais implements Langue{
  + <<create>> Francais()
  + nomBaton(): String
  + confimationCreationJoueur(int, String)
  + nomArc(): String
  + nbCasesDeplacement(int)
  + contenuInventaire(ArrayList<Equipement>): String
  + caseDestination(): String
  + afficheCreationJoueur()
  + nomHumain(): String
  + caseDeplacement(): String
  + personnageInexistant()
  + attaqueAllie()
  + afficherLegendePlateau(): String
  + demandeDonjonDefaut(): String
  + getActionMaitreJeu(): String
  + ouiOuNon(boolean): String
  + nomGuerison(): String
  + demandeNbCreationJoueur(): String
  + demandeLignesDonjon(): String
  + demandeRace(): String
  + demandeClasse(): String
  + demandeNbDegatInfliger(): String
  + guerirPerso(String, int, int, int)
  + nomBoogieWoogie(): String
  + nomGuerrier(): String
  + maitreDuJeu(): String
  + intervalleEntier(int, int): String
  + demandeMonstreSymbol(): String
  + infligerDegatsEchecPerso(int, String)
  + subirAttaquePerso(String, int, int, String)
  + getNomAttribut(Boolean): String
  + demandeNbCreationEquipement(): String
  + recupEquipement(String)
  + aucunEquipement()
  + demandeMonstrePv(): String
  + sePresenterJoueur(String, String, String): String
  + armeInexistante()
  + demandeMonstreClasseArmure(): String
  + selectionJoueur(): String
  + aucuneArmeEquipee()
  + demandeMonstreForce(): String
  + getInfosJoueur(String, String, String, int, int): String
  + mjFinTour(String)
  + demandeNomJoueur(): String
  + mauvaisFormatCase()
  + nomClerc(): String
  + demandePersonnageNumero(int): String
  + demandeNbCreationObjet(String): String
  + creerEquipementDonjon(): String
  + caseInvalide()
  + nomCotteDeMailles(): String
  + nomMasse(): String
  + nomRapiere(): String
  + demandeLangue(): String
  + getActionJoueur(String, int): String
  + lancerDe(int)
  + demandeElement(String): String
  + demanderEquiperDonjon(): String
  + nomArmureEcailles(): String
  + infligerDegatsSuccesPerso(int, String, int)
  + nomFronde(): String
  + demandeMonstreVitesse(): String
  + cibleHorsPortee(String)
  + demandeMonstrePortee(): String
  + caseHorsPortee()
  + nomEpeeLongue(): String
  + toString(): String
  + getActionPerso(String, int): String
  + choisirCaseDonjon(String)
  + toStringJoueur(String, String, String, int, int, int, int, int, ArrayList<Equipement>, Armure, Arme): String
  + afficheCreationDonjon(int)
  + afficheMsgFinDonjon(EtatDonjon)
  + attaquer(Boolean, int, int, int)
  + caseObstacleAjout(): String
  + nomArbalete(): String
  + nomHarnois(): String
  + nomMagicien(): String
  + demandeColonnesDonjon(): String
  + nomDemiPlate(): String
  + demandeMonstreDexterite(): String
  + joueurInexistant()
  + demandeMonstreDeFace(): String
  + choisirEquipement(): String
  + toStringArme(int, int, int, boolean): String
  + porteeAttaque(int)
  + nomEpee2Mains(): String
  + nomElf(): String
  + nomNain(): String
  + afficherLangueChoisie()
  + demandeNbCreationObstacle(): String
  + donjon(): String
  + caseInexistante()
  + getInfosPerso(String, int, int): String
  + demandeNbCreationDonjon(): String
  + memePersonnage()
  + selectionPersonnage(): String
  + nomHalfelin(): String
  + mjIntervientPas()
  + nomArmeMagique(): String
  + choisirSort(): String
  + toStringArmure(int, boolean): String
  + nomRoublard(): String
  + caseJoueurAjout(String): String
  + aucuneSelection(String)
  + demandeNbCreationMonstre(): String
  + demandeMonstreEspece(): String
  + peutPasLancerSort(Personnage personnage)
  + appuyerSurEntree()
}
class Fronde extends Arme{
  + <<create>> Fronde()
}
abstract class GestionDonjon <<abstract>>{
  + {static} demanderNombreCreation(int, int, String): int
  + {static} demanderCreationEquipements(int): ArrayList<Equipement>
  + {static} demanderCreationMonstres(int): ArrayList<Personnage>
  + {static} demanderCase(String[][], String, TypeCase): CasePlateau
  + {static} demanderEquiper(Joueur)
}
class Guerison extends Sort{
  + <<create>> Guerison()
  + lancer(ArrayList<Personnage>): boolean
}
class Guerrier extends Classe{
  - m_equipements: ArrayList<Equipement>
  + <<create>> Guerrier()
}
class Halfelin extends Race{
  + <<create>> Halfelin()
}
class Harnois extends Armure{
  + <<create>> Harnois()
}
class Humain extends Race{
  + <<create>> Humain()
}
abstract class Initialiseur <<abstract>>{
  + lancerJeu()
}
class Jeu {
  - m_joueurs: ArrayList<Joueur>
  - m_nbDonjons: int
  + <<create>> Jeu()
  + jouer()
  + creerJoueur()
}
class Joueur extends Personnage{
  - m_race: Race
  - m_classe: Classe
  + <<create>> Joueur(String, Race, Classe)
  + getAction(): int
  + getClasse(): String
  + sePresenter(): String
  + getInfos(): String
  + toString(): String
}
interface Langue << interface >> {
  + demandeMonstreVitesse(): String
  + nomClerc(): String
  + getInfosJoueur(String, String, String, int, int): String
  + creerEquipementDonjon(): String
  + nomNain(): String
  + caseDeplacement(): String
  + recupEquipement(String)
  + armeInexistante()
  + demandeDonjonDefaut(): String
  + nomGuerison(): String
  + caseInexistante()
  + choisirSort(): String
  + nomElf(): String
  + selectionPersonnage(): String
  + attaqueAllie()
  + nomGuerrier(): String
  + afficheMsgFinDonjon(EtatDonjon)
  + afficheCreationDonjon(int)
  + getActionJoueur(String, int): String
  + aucuneArmeEquipee()
  + getActionMaitreJeu(): String
  + nbCasesDeplacement(int)
  + toStringJoueur(String, String, String, int, int, int, int, int, ArrayList<Equipement>, Armure, Arme): String
  + contenuInventaire(ArrayList<Equipement>): String
  + nomCotteDeMailles(): String
  + demandePersonnageNumero(int): String
  + demandeNbCreationObstacle(): String
  + demandeNomJoueur(): String
  + nomHalfelin(): String
  + nomMagicien(): String
  + infligerDegatsEchecPerso(int, String)
  + getNomAttribut(Boolean): String
  + nomDemiPlate(): String
  + toStringArmure(int, boolean): String
  + nomArbalete(): String
  + donjon(): String
  + demandeElement(String): String
  + joueurInexistant()
  + mjFinTour(String)
  + nomEpeeLongue(): String
  + demandeMonstreDeFace(): String
  + demanderEquiperDonjon(): String
  + mjIntervientPas()
  + personnageInexistant()
  + maitreDuJeu(): String
  + demandeMonstrePv(): String
  + nomEpee2Mains(): String
  + nomRoublard(): String
  + choisirCaseDonjon(String)
  + confimationCreationJoueur(int, String)
  + nomBaton(): String
  + nomHarnois(): String
  + nomHumain(): String
  + attaquer(Boolean, int, int, int)
  + cibleHorsPortee(String)
  + aucuneSelection(String)
  + infligerDegatsSuccesPerso(int, String, int)
  + mauvaisFormatCase()
  + nomMasse(): String
  + demandeNbCreationEquipement(): String
  + demandeMonstreClasseArmure(): String
  + afficherLangueChoisie()
  + ouiOuNon(boolean): String
  + nomBoogieWoogie(): String
  + choisirEquipement(): String
  + demandeNbCreationObjet(String): String
  + demandeMonstreDexterite(): String
  + demandeClasse(): String
  + nomArmeMagique(): String
  + demandeMonstrePortee(): String
  + intervalleEntier(int, int): String
  + demandeNbDegatInfliger(): String
  + getActionPerso(String, int): String
  + caseInvalide()
  + sePresenterJoueur(String, String, String): String
  + nomFronde(): String
  + aucunEquipement()
  + demandeLangue(): String
  + afficherLegendePlateau(): String
  + nomArc(): String
  + memePersonnage()
  + lancerDe(int)
  + toString(): String
  + toStringArme(int, int, int, boolean): String
  + demandeColonnesDonjon(): String
  + caseJoueurAjout(String): String
  + demandeNbCreationJoueur(): String
  + demandeRace(): String
  + caseDestination(): String
  + subirAttaquePerso(String, int, int, String)
  + demandeMonstreForce(): String
  + caseHorsPortee()
  + nomRapiere(): String
  + demandeNbCreationDonjon(): String
  + nomArmureEcailles(): String
  + demandeLignesDonjon(): String
  + guerirPerso(String, int, int, int)
  + demandeMonstreEspece(): String
  + demandeMonstreSymbol(): String
  + selectionJoueur(): String
  + caseObstacleAjout(): String
  + demandeNbCreationMonstre(): String
  + afficheCreationJoueur()
  + porteeAttaque(int)
  + getInfosPerso(String, int, int): String
  + peutPasLancerSort(Personnage personnage)
  + appuyerSurEntree()
}
class Magicien extends Classe{
  - m_equipements: ArrayList<Equipement>
  - m_sorts: ArrayList<Sort>
  + <<create>> Magicien()
}
class Main {
  + main()
}
class Masse extends Arme{
  + <<create>> Masse()
}
class Monstre extends Personnage{
  - m_numero: int
  + <<create>> Monstre(String, String, int, int, int, int, int, int, int, int)
  + toString(): String
}
class Nain extends Race{
  + <<create>> Nain()
}
abstract class Personnage <<abstract>>{
  - m_pv: int
  - m_inventaire: ArrayList<Equipement>
  - m_initiative: int
  - m_arme: Arme
  - m_type: TypePersonnage
  - m_armure: Armure
  - m_pion: Pion
  - m_nom: String
  - m_symbol: String
  - m_pvMax: int
  - m_dexterite: int
  - m_vitesse: int
  - m_force: int
  - m_sorts: ArrayList<Sort>
  # <<create>> Personnage(String, String, TypePersonnage, int, int, int, int, int, Arme, Armure, ArrayList<Equipement>, ArrayList<Sort>)
  + peutAttaquer(): boolean
  + sePresenter(): String
  + getPortee(): int
  + toString(): String
  + getAction(): int
  + getInitiative(): int
  + estMort(): boolean
  + equiper()
  + seDeplacer(Pion)
  + choisirEquipementType(TypeEquipement): Equipement
  + getVitesse(): int
  + equals(Personnage): boolean
  + getArmure(): Armure
  + peutLancerSorts(): boolean
  + getInventaire(): ArrayList<Equipement>
  + getPion(): Pion
  + getType(): TypePersonnage
  + lancerSort(ArrayList<Personnage>): boolean
  + attaquer(Personnage)
  + guerir(int)
  + setVitesse(int)
  + setArme(Arme)
  + getTailleInventaire(): int
  + getPv(): int
  + getInfos(): String
  + getArme(): Arme
  + setInitiative(int)
  + getDexterite(): int
  + getForce(): int
  + setForce(int)
  + getAttribut(): int
  + diminuerInitiative()
  + getSymbol(): String
  + seDeplacer(int, int)
  + getClasseArmure(): int
  + recuperer(Equipement)
  + getPvMax(): int
  + getNom(): String
  + setArmure(Armure)
  + subirAttaque(int, String)
  - infligerDegats(Personnage, int)
  - getDegats(): int
  - choisirEquipement(ArrayList<Equipement>): Equipement
  - choisirEquipementEquiper(): Equipement
  - getEquipement(TypeEquipement): ArrayList<Equipement>
  - choisirSort(): Sort
}
class Pion {
  - m_symbol: String
  - m_y: int
  - m_x: int
  + <<create>> Pion(int, int, String)
  + <<create>> Pion(Pion)
  + getY(): int
  + getX(): int
  + toString(): String
  + getDistance(int, int): int
  + setPosition(Pion)
  + getDistance(Pion): int
  + equals(Pion): boolean
  + setPosition(int, int)
}
abstract class Race <<abstract>>{
  - m_nom: String
  - m_pv: int
  - m_force: int
  - m_dexterite: int
  - m_vitesse: int
  + <<create>> Race(String, int, int, int, int)
  + getVitesse(): int
  + getDexterite(): int
  + getForce(): int
  + toString(): String
  + getPv(): int
}
class Rapiere extends Arme{
  + <<create>> Rapiere()
}
class Roublard extends Classe{
  - m_equipements: ArrayList<Equipement>
  + <<create>> Roublard()
}
class SlotArme implements SlotEquipable{
  - m_perso: Personnage
  + <<create>> SlotArme(Personnage)
  + set(Equipement)
  + get(): Equipement
}
class SlotArmure implements SlotEquipable{
  - m_perso: Personnage
  + <<create>> SlotArmure(Personnage)
  + get(): Equipement
  + set(Equipement)
}
interface SlotEquipable << interface >> {
  + set(Equipement)
  + get(): Equipement
}
abstract class Sort <<abstract>>{
  - m_nom: String
  + <<create>> Sort(String)
  + <<abstract>> lancer(ArrayList<Personnage>): boolean
  + toString(): String
}
abstract class Symbols <<abstract>>{
  + {static} CASE_VIDE: String
  + {static} CASE_EQUIPEMENT: String
  + {static} CASE_OBSTACLE: String
}
enum TypeCase << enumerate >> {
  DEPLACEMENT
  AJOUT
}
enum TypeEquipement << enumerate >> {
  ARMURE
  ARME
}
enum TypePersonnage << enumerate >> {
  MONSTRE
  JOUEUR
}

Affichage        -->  Anglais         : "«create»"
Affichage        -->  Francais        : "«create»"
Affichage       "1" *--> "m_langue\n1" Langue
BoogieWoogie     -->  Pion            : "«create»"
Classe          "1" *--> "m_equipements\n*" Equipement
Classe          "1" *--> "m_sorts\n*" Sort
Clerc            -->  Arbalete        : "«create»"
Clerc            -->  ArmureEcailles  : "«create»"
Clerc           "1" *--> "m_equipements\n*" Equipement
Clerc            -->  Guerison        : "«create»"
Clerc            -->  Masse           : "«create»"
Clerc           "1" *--> "m_sorts\n*" Sort
Donjon           -->  Arbalete        : "«create»"
Donjon           -->  CasePlateau     : "«create»"
Donjon           -->  CotteDeMailles  : "«create»"
Donjon           -->  DemiPlate       : "«create»"
Donjon           -->  Donjon          : "«create»"
Donjon           -->  EpeeLongue      : "«create»"
Donjon          "1" *--> "m_equipements\n*" Equipement
Donjon           -->  Masse           : "«create»"
Donjon           -->  Monstre         : "«create»"
Donjon          "1" *--> "m_personnages\n*" Personnage
Donjon           -->  Pion            : "«create»"
EffetsStandards "1" *--> "ARMURE_LOURDE\n*" Effet
EffetsStandards  -->  EffetForce      : "«create»"
EffetsStandards  -->  EffetVitesse    : "«create»"
Equipement      "1" *--> "m_effets\n*" Effet
Equipement       -->  Pion            : "«create»"
Equipement      "1" *--> "m_pion\n1" Pion
Equipement      "1" *--> "m_type\n1" TypeEquipement
GestionDonjon    -->  Arbalete        : "«create»"
GestionDonjon    -->  Arc             : "«create»"
GestionDonjon    -->  ArmureEcailles  : "«create»"
GestionDonjon    -->  Baton           : "«create»"
GestionDonjon    -->  CasePlateau     : "«create»"
GestionDonjon    -->  CotteDeMailles  : "«create»"
GestionDonjon    -->  DemiPlate       : "«create»"
GestionDonjon    -->  Epee2Mains      : "«create»"
GestionDonjon    -->  EpeeLongue      : "«create»"
GestionDonjon    -->  Fronde          : "«create»"
GestionDonjon    -->  Harnois         : "«create»"
GestionDonjon    -->  Masse           : "«create»"
GestionDonjon    -->  Monstre         : "«create»"
GestionDonjon    -->  Rapiere         : "«create»"
Guerrier         -->  Arbalete        : "«create»"
Guerrier         -->  CotteDeMailles  : "«create»"
Guerrier         -->  EpeeLongue      : "«create»"
Guerrier        "1" *--> "m_equipements\n*" Equipement
Initialiseur     -->  Jeu             : "«create»"
Jeu              -->  Clerc           : "«create»"
Jeu              -->  Elf             : "«create»"
Jeu              -->  Guerrier        : "«create»"
Jeu              -->  Halfelin        : "«create»"
Jeu              -->  Humain          : "«create»"
Jeu             "1" *--> "m_joueurs\n*" Joueur
Jeu              -->  Joueur          : "«create»"
Jeu              -->  Magicien        : "«create»"
Jeu              -->  Nain            : "«create»"
Jeu              -->  Roublard        : "«create»"
Joueur           -->  Arme            : "«create»"
Joueur           -->  Armure          : "«create»"
Joueur          "1" *--> "m_classe\n1" Classe
Joueur          "1" *--> "m_race\n1" Race
Magicien         -->  ArmeMagique     : "«create»"
Magicien         -->  Baton           : "«create»"
Magicien         -->  BoogieWoogie    : "«create»"
Magicien        "1" *--> "m_equipements\n*" Equipement
Magicien         -->  Fronde          : "«create»"
Magicien         -->  Guerison        : "«create»"
Magicien        "1" *--> "m_sorts\n*" Sort
Monstre          -->  Arme            : "«create»"
Monstre          -->  Armure          : "«create»"
Personnage      "1" *--> "m_arme\n1" Arme
Personnage      "1" *--> "m_armure\n1" Armure
Personnage      "1" *--> "m_inventaire\n*" Equipement
Personnage       -->  Pion            : "«create»"
Personnage      "1" *--> "m_pion\n1" Pion
Personnage       -->  SlotArme        : "«create»"
Personnage       -->  SlotArmure      : "«create»"
Personnage      "1" *--> "m_sorts\n*" Sort
Personnage      "1" *--> "m_type\n1" TypePersonnage
Roublard         -->  Arc             : "«create»"
Roublard        "1" *--> "m_equipements\n*" Equipement
Roublard         -->  Rapiere         : "«create»"
SlotArme        "1" *--> "m_perso\n1" Personnage
SlotArmure      "1" *--> "m_perso\n1" Personnage
@enduml
