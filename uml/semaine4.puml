@startuml

skinparam AttributeIconSize 0
skinparam classFontStyle Bold
skinparam style strictuml
hide empty members

abstract class Affichage <<abstract>>{
  - {static} m_langue: Langue
  + {static} demandeNbCreationJoueur(): String
  + {static} subirAttaquePerso(nom: String, degats: Integer, pv: Integer, attaquant: String)
  + {static} demandeMonstreSymbol(): String
  + {static} demandeMonstreClasseArmure(): String
  + {static} getActionMaitreJeu(): String
  + {static} lancerDe(Integer)
  + {static} nomRoublard(): String
  + {static} demandeMonstrePortee(): String
  + {static} caseDestination(): String
  + {static} attaqueAllie()
  + {static} demandeLignesDonjon(): String
  + {static} caseHorsPortee()
  + {static} demandeMonstrePv(): String
  + {static} nomHarnois(): String
  + {static} joueurInexistant()
  + {static} aucuneSelection(String)
  + {static} nomBaton(): String
  + {static} contenuInventaire(ArrayList<Equipement>): String
  + {static} nomGuerrier(): String
  + {static} personnageInexistant()
  + {static} choisirCaseDonjon(String)
  + {static} afficherTour(Integer, Integer, String[][], Integer, ArrayList<Personnage>, Integer, Personnage): String
  + {static} caseJoueurAjout(String): String
  + {static} nomNain(): String
  + {static} demandeNbCreationObjet(String): String
  + {static} attaquer(Boolean, Integer, Integer, Integer)
  + {static} demandeNbDegatInfliger(): String
  + {static} mjIntervientPas()
  + {static} caseInexistante()
  + {static} infligerDegatsSuccesPerso(Integer, String, Integer)
  + {static} demandeNbCreationObstacle(): String
  + {static} nomDemiPlate(): String
  + {static} selectionPersonnage(): String
  + {static} armeInexistante()
  + {static} nomArbalete(): String
  + {static} nomArmeMagique(): String
  + {static} choisirEquipement(ArrayList<Equipement>): String
  + {static} nomFronde(): String
  + {static} demandeMonstreDexterite(): String
  + {static} nomHumain(): String
  + {static} demandeMonstreForce(): String
  + {static} demandeMonstreDeFace(): String
  + {static} nomArc(): String
  + {static} getInfosJoueur(String, String, String, Integer, Integer): String
  + {static} sePresenterJoueur(String, String, String): String
  + {static} choisirLangue()
  + {static} toStringArmure(Integer, boolean): String
  + {static} nomElf(): String
  + {static} maitreDuJeu(): String
  + {static} nomMasse(): String
  + {static} selectionJoueur(): String
  + {static} demandeDonjonDefaut(): String
  + {static} demandeNomJoueur(): String
  + {static} getActionPerso(String, Integer): String
  + {static} demanderEquiperDonjon(): String
  + {static} afficheCreationJoueur()
  + {static} toStringArme(Integer, Integer, Integer, boolean): String
  + {static} porteeAttaque(Integer)
  + {static} nomEpeeLongue(): String
  + {static} creerEquipementDonjon(): String
  + {static} demandeMonstreVitesse(): String
  + {static} nomBoogieWoogie(): String
  + {static} demandeNbCreationDonjon(): String
  + {static} demandeRace(): String
  + {static} demandeColonnesDonjon(): String
  + {static} aucunEquipement()
  + {static} nomMagicien(): String
  + {static} afficheCreationDonjon(Integer)
  + {static} nomHalfelin(): String
  + {static} memePersonnage()
  + {static} toStringJoueur(String, String, String, Integer, Integer, Integer, Integer, Integer, ArrayList<Equipement>, Armure, Arme): String
  + {static} mjFinTour(String)
  + {static} nomEpee2Mains(): String
  + {static} intervalleEntier(Integer, Integer): String
  + {static} confimationCreationJoueur(Integer, String)
  + {static} demandeNbCreationMonstre(): String
  + {static} cibleHorsPortee(String)
  + {static} nomArmureEcailles(): String
  + {static} demandeNbCreationEquipement(): String
  + {static} demandeLangue(): String
  + {static} getActionJoueur(String, Integer): String
  + {static} nomRapiere(): String
  + {static} nomClerc(): String
  + {static} caseInvalide()
  + {static} demandeClasse(): String
  + {static} nbCasesDeplacement(Integer)
  + {static} choisirSort(ArrayList<Sort>): String
  + {static} demandeMonstreEspece(): String
  + {static} recupEquipement(String)
  + {static} mauvaisFormatCase()
  + {static} demandeElement(String): String
  + {static} afficherPlateauDonjon(Integer, Integer, String[][]): String
  + {static} guerirPerso(String, Integer, Integer, Integer)
  + {static} caseObstacleAjout(): String
  + {static} nomGuerison(): String
  + {static} nomCotteDeMailles(): String
  + {static} demandePersonnageNumero(Integer): String
  + {static} infligerDegatsEchecPerso(Integer, String)
  + {static} caseDeplacement(): String
  + {static} afficherLangueChoisie()
  + {static} afficheMsgFinDonjon(EtatDonjon)
  + {static} getInfosPerso(String, Integer, Integer): String
  + {static} aucuneArmeEquipee()
  + {static} peutPasLancerSort(Personnage personnage)
  + {static} appuyerSurEntree()
}
class Anglais implements Langue{
  + <<create>> Anglais()
  + guerirPerso(String, Integer, Integer, Integer)
  + donjon(): String
  + selectionJoueur(): String
  + demandeMonstreClasseArmure(): String
  + subirAttaquePerso(String, Integer, Integer, String)
  + demandeNbCreationEquipement(): String
  + demandeNbCreationMonstre(): String
  + demandeMonstreDeFace(): String
  + demandePersonnageNumero(Integer): String
  + sePresenterJoueur(String, String, String): String
  + nomCotteDeMailles(): String
  + demandeDonjonDefaut(): String
  + intervalleEntier(Integer, Integer): String
  + demandeMonstreSymbol(): String
  + toStringJoueur(String, String, String, Integer, Integer, Integer, Integer, Integer, ArrayList<Equipement>, Armure, Arme): String
  + nomDemiPlate(): String
  + porteeAttaque(Integer)
  + nomEpeeLongue(): String
  + demandeColonnesDonjon(): String
  + getInfosPerso(String, Integer, Integer): String
  + personnageInexistant()
  + maitreDuJeu(): String
  + nomNain(): String
  + caseObstacleAjout(): String
  + demandeNbCreationObjet(String): String
  + caseInexistante()
  + toStringArme(Integer, Integer, Integer, boolean): String
  + demandeMonstrePv(): String
  + creerEquipementDonjon(): String
  + getInfosJoueur(String, String, String, Integer, Integer): String
  + nbCasesDeplacement(Integer)
  + aucuneArmeEquipee()
  + confimationCreationJoueur(Integer, String)
  + nomArmeMagique(): String
  + recupEquipement(String)
  + nomHalfelin(): String
  + attaqueAllie()
  + mjFinTour(String)
  + infligerDegatsSuccesPerso(Integer, String, Integer)
  + choisirCaseDonjon(String)
  + afficheMsgFinDonjon(EtatDonjon)
  + ouiOuNon(boolean): String
  + aucuneSelection(String)
  + infligerDegatsEchecPerso(Integer, String)
  + caseJoueurAjout(String): String
  + demandeRace(): String
  + caseDestination(): String
  + nomGuerrier(): String
  + nomArc(): String
  + afficheCreationJoueur()
  + demandeMonstreDexterite(): String
  + nomClerc(): String
  + caseDeplacement(): String
  + nomHumain(): String
  + demandeNbCreationObstacle(): String
  + demandeNbCreationJoueur(): String
  + toStringArmure(Integer, boolean): String
  + nomRapiere(): String
  + joueurInexistant()
  + afficheCreationDonjon(Integer)
  + nomGuerison(): String
  + mjIntervientPas()
  + demandeNbDegatInfliger(): String
  + cibleHorsPortee(String)
  + contenuInventaire(ArrayList<Equipement>): String
  + demandeMonstreForce(): String
  + attaquer(Boolean, Integer, Integer, Integer)
  + nomArbalete(): String
  + caseInvalide()
  + demandeMonstreVitesse(): String
  + caseHorsPortee()
  + nomMagicien(): String
  + demandeClasse(): String
  + getActionMaitreJeu(): String
  + armeInexistante()
  + nomFronde(): String
  + demandeMonstreEspece(): String
  + demandeMonstrePortee(): String
  + lancerDe(Integer)
  + demandeElement(String): String
  + getActionPerso(String, Integer): String
  + demanderEquiperDonjon(): String
  + nomArmureEcailles(): String
  + selectionPersonnage(): String
  + aucunEquipement()
  + nomHarnois(): String
  + nomBaton(): String
  + demandeNomJoueur(): String
  + demandeLangue(): String
  + nomBoogieWoogie(): String
  + afficherLangueChoisie()
  + nomEpee2Mains(): String
  + nomMasse(): String
  + getActionJoueur(String, Integer): String
  + getNomAttribut(Boolean): String
  + memePersonnage()
  + toString(): String
  + demandeLignesDonjon(): String
  + nomElf(): String
  + choisirEquipement(): String
  + afficherLegendePlateau(): String
  + demandeNbCreationDonjon(): String
  + choisirSort(): String
  + mauvaisFormatCase()
  + nomRoublard(): String
  + peutPasLancerSort(Personnage personnage)
  + appuyerSurEntree()
}
class Arbalete extends Arme{
  + <<create>> Arbalete()
}
class Arc extends Arme{
  + <<create>> Arc()
}
class Arme extends Equipement{
  - m_portee: Integer
  - m_bonus: Integer
  - m_amplitudeDegats: Integer
  - m_nbLance: Integer
  + <<create>> Arme(String, Integer, Integer, boolean, Integer)
  + <<create>> Arme(String, Integer, Integer, boolean)
  + getBonus(): Integer
  + estArmeDistance(): boolean
  + toString(): String
  + attaque(): Integer
  + getPortee(): Integer
  + getAmplitudeDegats(): Integer
  + addBonus(Integer)
}
class ArmeMagique extends Sort{
  + <<create>> ArmeMagique()
  + lancer(ArrayList<Personnage>): boolean
}
class Armure extends Equipement{
  - m_classeArmure: Integer
  + <<create>> Armure(String, Integer, boolean)
  + toString(): String
  + getClasseArmure(): Integer
}
class ArmureEcailles extends Armure{
  + <<create>> ArmureEcailles()
}
class Baton extends Arme{
  + <<create>> Baton()
}
class BoogieWoogie extends Sort{
  + <<create>> BoogieWoogie()
  + lancer(ArrayList<Personnage>): boolean
}
class CasePlateau {
  - m_case: String
  - m_colonne: Integer
  - m_ligne: Integer
  + <<create>> CasePlateau(String)
  + getColonne(): Integer
  + estValide(String[][], TypeCase): boolean
  + getLigne(): Integer
  - estBonFormat(): boolean
  - convertirString()
  - estChiffre(char): boolean
  - estLettre(char): boolean
  - estNombre(String): boolean
}
abstract class Classe <<abstract>>{
  - m_nom: String
  - m_equipements: ArrayList<Equipement>
  - m_pv: Integer
  - m_sorts: ArrayList<Sort>
  + <<create>> Classe(String, Integer, ArrayList<Equipement>, ArrayList<Sort>)
  + <<create>> Classe(String, Integer, ArrayList<Equipement>)
  + getSorts(): ArrayList<Sort>
  + getEquipements(): ArrayList<Equipement>
  + toString(): String
  + getPv(): Integer
}
class Clerc extends Classe{
  - m_sorts: ArrayList<Sort>
  - m_equipements: ArrayList<Equipement>
  + <<create>> Clerc()
}
class CotteDeMailles extends Armure{
  + <<create>> CotteDeMailles()
}
abstract class De <<abstract>>{
  + {static} lance(Integer): Integer
}
abstract class Demande <<abstract>>{
  + {static} getJoueurs(ArrayList<Personnage>): ArrayList<Joueur>
  + {static} demanderJoueurs(ArrayList<Joueur>, Integer): ArrayList<Joueur>
  + {static} demandeEntier(Integer, Integer, String): Integer
  + {static} demandeString(String, Integer): String
  + {static} demanderPersonnagesWithoutSelf(ArrayList<Personnage>, Integer, Personnage): ArrayList<Personnage>
  + {static} demanderPersonnages(ArrayList<Personnage>, Integer): ArrayList<Personnage>
  + {static} demanderPersonnagesFilter(ArrayList<Personnage>, Integer): ArrayList<Personnage>
}
class DemiPlate extends Armure{
  + <<create>> DemiPlate()
}
class Donjon {
  - m_casesLibres: Integer
  - m_numero: Integer
  - m_lignes: Integer
  - m_tour: Integer
  - m_plateau: String[][]
  - m_equipements: ArrayList<Equipement>
  - m_personnages: ArrayList<Personnage>
  - m_nbJoueurs: Integer
  - m_colonnes: Integer
  + <<create>> Donjon(Integer, ArrayList<Joueur>)
  + <<create>> Donjon(Integer, Integer, Integer, ArrayList<Joueur>)
  + <<create>> Donjon(Integer, Integer, Integer, ArrayList<Joueur>, boolean)
  + toString(): String
  + jouerDonjon(): boolean
  + tryLancerSort(Personnage): boolean
  + creerDonjon(Integer, ArrayList<Joueur>): Donjon
  + getNbPerso(TypePersonnage): Integer
  + recupererJoueurs(): ArrayList<Joueur>
  - tryRamasserEquipement(Personnage)
  - ajouterPersonnages(ArrayList<Personnage>)
  - updatePosPersos()
  - ajouterEquipements(ArrayList<Equipement>)
  - affichageTour(Personnage): String
  - getEquipement(Pion): Equipement
  - infligerDegats()
  - choisirCase(String, TypeCase): CasePlateau
  - creerObstacles()
  - tryAttaque(Personnage): boolean
  - testFinDonjon(): EtatDonjon
  - genererDefaut()
  - remplirPlateau()
  - remplir()
  - tryDeplacement(Personnage): boolean
  - interventionMaitrejeu(Personnage)
  - testMortPerso(Personnage)
  - lancerInitiative(ArrayList<Personnage>)
  - ajouterObstacle(CasePlateau)
  - deplacerPerso(Personnage, CasePlateau)
  - tourDonjon(): EtatDonjon
  - creerEquipements()
  - ajouterPersonnage(Personnage, CasePlateau)
  - updateCase(Pion)
  - tourPerso(Personnage): EtatDonjon
  - formatSymbol(String): String
  - ajouterEquipement(Equipement, CasePlateau)
  - getNbMaxCreation(): Integer
  - positionnerJoueurs()
  - getActionMaitreJeu(): Integer
  - triParInitiative(ArrayList<Personnage>)
  - creerMonstres()
  - tryEquiper(Personnage): boolean
  - getPersoVivants(ArrayList<Personnage>): ArrayList<Personnage>
}
interface Effet << interface >> {
  + appliquer(Personnage)
  + retirer(Personnage)
}
class EffetForce implements Effet{
  - m_valeur: Integer
  + <<create>> EffetForce(Integer)
  + retirer(Personnage)
  + appliquer(Personnage)
}
class EffetVitesse implements Effet{
  - m_valeur: Integer
  + <<create>> EffetVitesse(Integer)
  + appliquer(Personnage)
  + retirer(Personnage)
}
abstract class EffetsStandards <<abstract>>{
  + {static} ARMURE_LOURDE: ArrayList<Effet>
  + {static} ARME_LOURDE: ArrayList<Effet>
  + {static} SANS_EFFET: ArrayList<Effet>
}
class Elf extends Race{
  + <<create>> Elf()
}
class Epee2Mains extends Arme{
  + <<create>> Epee2Mains()
}
class EpeeLongue extends Arme{
  + <<create>> EpeeLongue()
}
abstract class Equipement <<abstract>>{
  # m_estLourd: boolean
  - m_type: TypeEquipement
  - m_effets: ArrayList<Effet>
  - m_nom: String
  - m_pion: Pion
  + <<create>> Equipement(String, boolean, TypeEquipement, ArrayList<Effet>)
  + getPion(): Pion
  + toString(): String
  + retirerEffets(Personnage)
  + getType(): TypeEquipement
  + appliquerEffets(Personnage)
  + pasDefinie(): boolean
  + setPion(Integer, Integer)
}
enum EtatDonjon << enumerate >> {
  EN_COURS
  DEFAITE
  VICTOIRE
}
class Francais implements Langue{
  + <<create>> Francais()
  + nomBaton(): String
  + confimationCreationJoueur(Integer, String)
  + nomArc(): String
  + nbCasesDeplacement(Integer)
  + contenuInventaire(ArrayList<Equipement>): String
  + caseDestination(): String
  + afficheCreationJoueur()
  + nomHumain(): String
  + caseDeplacement(): String
  + personnageInexistant()
  + attaqueAllie()
  + afficherLegendePlateau(): String
  + demandeDonjonDefaut(): String
  + getActionMaitreJeu(): String
  + ouiOuNon(boolean): String
  + nomGuerison(): String
  + demandeNbCreationJoueur(): String
  + demandeLignesDonjon(): String
  + demandeRace(): String
  + demandeClasse(): String
  + demandeNbDegatInfliger(): String
  + guerirPerso(String, Integer, Integer, Integer)
  + nomBoogieWoogie(): String
  + nomGuerrier(): String
  + maitreDuJeu(): String
  + intervalleEntier(Integer, Integer): String
  + demandeMonstreSymbol(): String
  + infligerDegatsEchecPerso(Integer, String)
  + subirAttaquePerso(String, Integer, Integer, String)
  + getNomAttribut(Boolean): String
  + demandeNbCreationEquipement(): String
  + recupEquipement(String)
  + aucunEquipement()
  + demandeMonstrePv(): String
  + sePresenterJoueur(String, String, String): String
  + armeInexistante()
  + demandeMonstreClasseArmure(): String
  + selectionJoueur(): String
  + aucuneArmeEquipee()
  + demandeMonstreForce(): String
  + getInfosJoueur(String, String, String, Integer, Integer): String
  + mjFinTour(String)
  + demandeNomJoueur(): String
  + mauvaisFormatCase()
  + nomClerc(): String
  + demandePersonnageNumero(Integer): String
  + demandeNbCreationObjet(String): String
  + creerEquipementDonjon(): String
  + caseInvalide()
  + nomCotteDeMailles(): String
  + nomMasse(): String
  + nomRapiere(): String
  + demandeLangue(): String
  + getActionJoueur(String, Integer): String
  + lancerDe(Integer)
  + demandeElement(String): String
  + demanderEquiperDonjon(): String
  + nomArmureEcailles(): String
  + infligerDegatsSuccesPerso(Integer, String, Integer)
  + nomFronde(): String
  + demandeMonstreVitesse(): String
  + cibleHorsPortee(String)
  + demandeMonstrePortee(): String
  + caseHorsPortee()
  + nomEpeeLongue(): String
  + toString(): String
  + getActionPerso(String, Integer): String
  + choisirCaseDonjon(String)
  + toStringJoueur(String, String, String, Integer, Integer, Integer, Integer, Integer, ArrayList<Equipement>, Armure, Arme): String
  + afficheCreationDonjon(Integer)
  + afficheMsgFinDonjon(EtatDonjon)
  + attaquer(Boolean, Integer, Integer, Integer)
  + caseObstacleAjout(): String
  + nomArbalete(): String
  + nomHarnois(): String
  + nomMagicien(): String
  + demandeColonnesDonjon(): String
  + nomDemiPlate(): String
  + demandeMonstreDexterite(): String
  + joueurInexistant()
  + demandeMonstreDeFace(): String
  + choisirEquipement(): String
  + toStringArme(Integer, Integer, Integer, boolean): String
  + porteeAttaque(Integer)
  + nomEpee2Mains(): String
  + nomElf(): String
  + nomNain(): String
  + afficherLangueChoisie()
  + demandeNbCreationObstacle(): String
  + donjon(): String
  + caseInexistante()
  + getInfosPerso(String, Integer, Integer): String
  + demandeNbCreationDonjon(): String
  + memePersonnage()
  + selectionPersonnage(): String
  + nomHalfelin(): String
  + mjIntervientPas()
  + nomArmeMagique(): String
  + choisirSort(): String
  + toStringArmure(Integer, boolean): String
  + nomRoublard(): String
  + caseJoueurAjout(String): String
  + aucuneSelection(String)
  + demandeNbCreationMonstre(): String
  + demandeMonstreEspece(): String
  + peutPasLancerSort(Personnage personnage)
  + appuyerSurEntree()
}
class Fronde extends Arme{
  + <<create>> Fronde()
}
abstract class GestionDonjon <<abstract>>{
  + {static} demanderNombreCreation(Integer, Integer, String): Integer
  + {static} demanderCreationEquipements(Integer): ArrayList<Equipement>
  + {static} demanderCreationMonstres(Integer): ArrayList<Personnage>
  + {static} demanderCase(String[][], String, TypeCase): CasePlateau
  + {static} demanderEquiper(Joueur)
}
class Guerison extends Sort{
  + <<create>> Guerison()
  + lancer(ArrayList<Personnage>): boolean
}
class Guerrier extends Classe{
  - m_equipements: ArrayList<Equipement>
  + <<create>> Guerrier()
}
class Halfelin extends Race{
  + <<create>> Halfelin()
}
class Harnois extends Armure{
  + <<create>> Harnois()
}
class Humain extends Race{
  + <<create>> Humain()
}
abstract class Initialiseur <<abstract>>{
  + lancerJeu()
}
class Jeu {
  - m_joueurs: ArrayList<Joueur>
  - m_nbDonjons: Integer
  + <<create>> Jeu()
  + jouer()
  + creerJoueur()
}
class Joueur extends Personnage{
  - m_race: Race
  - m_classe: Classe
  + <<create>> Joueur(String, Race, Classe)
  + getAction(): Integer
  + getClasse(): String
  + sePresenter(): String
  + getInfos(): String
  + toString(): String
}
interface Langue << interface >> {
  + demandeMonstreVitesse(): String
  + nomClerc(): String
  + getInfosJoueur(String, String, String, Integer, Integer): String
  + creerEquipementDonjon(): String
  + nomNain(): String
  + caseDeplacement(): String
  + recupEquipement(String)
  + armeInexistante()
  + demandeDonjonDefaut(): String
  + nomGuerison(): String
  + caseInexistante()
  + choisirSort(): String
  + nomElf(): String
  + selectionPersonnage(): String
  + attaqueAllie()
  + nomGuerrier(): String
  + afficheMsgFinDonjon(EtatDonjon)
  + afficheCreationDonjon(Integer)
  + getActionJoueur(String, Integer): String
  + aucuneArmeEquipee()
  + getActionMaitreJeu(): String
  + nbCasesDeplacement(Integer)
  + toStringJoueur(String, String, String, Integer, Integer, Integer, Integer, Integer, ArrayList<Equipement>, Armure, Arme): String
  + contenuInventaire(ArrayList<Equipement>): String
  + nomCotteDeMailles(): String
  + demandePersonnageNumero(Integer): String
  + demandeNbCreationObstacle(): String
  + demandeNomJoueur(): String
  + nomHalfelin(): String
  + nomMagicien(): String
  + infligerDegatsEchecPerso(Integer, String)
  + getNomAttribut(Boolean): String
  + nomDemiPlate(): String
  + toStringArmure(Integer, boolean): String
  + nomArbalete(): String
  + donjon(): String
  + demandeElement(String): String
  + joueurInexistant()
  + mjFinTour(String)
  + nomEpeeLongue(): String
  + demandeMonstreDeFace(): String
  + demanderEquiperDonjon(): String
  + mjIntervientPas()
  + personnageInexistant()
  + maitreDuJeu(): String
  + demandeMonstrePv(): String
  + nomEpee2Mains(): String
  + nomRoublard(): String
  + choisirCaseDonjon(String)
  + confimationCreationJoueur(Integer, String)
  + nomBaton(): String
  + nomHarnois(): String
  + nomHumain(): String
  + attaquer(Boolean, Integer, Integer, Integer)
  + cibleHorsPortee(String)
  + aucuneSelection(String)
  + infligerDegatsSuccesPerso(Integer, String, Integer)
  + mauvaisFormatCase()
  + nomMasse(): String
  + demandeNbCreationEquipement(): String
  + demandeMonstreClasseArmure(): String
  + afficherLangueChoisie()
  + ouiOuNon(boolean): String
  + nomBoogieWoogie(): String
  + choisirEquipement(): String
  + demandeNbCreationObjet(String): String
  + demandeMonstreDexterite(): String
  + demandeClasse(): String
  + nomArmeMagique(): String
  + demandeMonstrePortee(): String
  + intervalleEntier(Integer, Integer): String
  + demandeNbDegatInfliger(): String
  + getActionPerso(String, Integer): String
  + caseInvalide()
  + sePresenterJoueur(String, String, String): String
  + nomFronde(): String
  + aucunEquipement()
  + demandeLangue(): String
  + afficherLegendePlateau(): String
  + nomArc(): String
  + memePersonnage()
  + lancerDe(Integer)
  + toString(): String
  + toStringArme(Integer, Integer, Integer, boolean): String
  + demandeColonnesDonjon(): String
  + caseJoueurAjout(String): String
  + demandeNbCreationJoueur(): String
  + demandeRace(): String
  + caseDestination(): String
  + subirAttaquePerso(String, Integer, Integer, String)
  + demandeMonstreForce(): String
  + caseHorsPortee()
  + nomRapiere(): String
  + demandeNbCreationDonjon(): String
  + nomArmureEcailles(): String
  + demandeLignesDonjon(): String
  + guerirPerso(String, Integer, Integer, Integer)
  + demandeMonstreEspece(): String
  + demandeMonstreSymbol(): String
  + selectionJoueur(): String
  + caseObstacleAjout(): String
  + demandeNbCreationMonstre(): String
  + afficheCreationJoueur()
  + porteeAttaque(Integer)
  + getInfosPerso(String, Integer, Integer): String
  + peutPasLancerSort(Personnage personnage)
  + appuyerSurEntree()
}
class Magicien extends Classe{
  - m_equipements: ArrayList<Equipement>
  - m_sorts: ArrayList<Sort>
  + <<create>> Magicien()
}
class Main {
  + main()
}
class Masse extends Arme{
  + <<create>> Masse()
}
class Monstre extends Personnage{
  - m_numero: Integer
  + <<create>> Monstre(String, String, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer)
  + toString(): String
}
class Nain extends Race{
  + <<create>> Nain()
}
abstract class Personnage <<abstract>>{
  - m_pv: Integer
  - m_inventaire: ArrayList<Equipement>
  - m_initiative: Integer
  - m_arme: Arme
  - m_type: TypePersonnage
  - m_armure: Armure
  - m_pion: Pion
  - m_nom: String
  - m_symbol: String
  - m_pvMax: Integer
  - m_dexterite: Integer
  - m_vitesse: Integer
  - m_force: Integer
  - m_sorts: ArrayList<Sort>
  # <<create>> Personnage(String, String, TypePersonnage, Integer, Integer, Integer, Integer, Integer, Arme, Armure, ArrayList<Equipement>, ArrayList<Sort>)
  + peutAttaquer(): boolean
  + sePresenter(): String
  + getPortee(): Integer
  + toString(): String
  + getAction(): Integer
  + getInitiative(): Integer
  + estMort(): boolean
  + equiper()
  + seDeplacer(Pion)
  + choisirEquipementType(TypeEquipement): Equipement
  + getVitesse(): Integer
  + equals(Personnage): boolean
  + getArmure(): Armure
  + peutLancerSorts(): boolean
  + getInventaire(): ArrayList<Equipement>
  + getPion(): Pion
  + getType(): TypePersonnage
  + lancerSort(ArrayList<Personnage>): boolean
  + attaquer(Personnage)
  + guerir(Integer)
  + setVitesse(Integer)
  + setArme(Arme)
  + getTailleInventaire(): Integer
  + getPv(): Integer
  + getInfos(): String
  + getArme(): Arme
  + setInitiative(Integer)
  + getDexterite(): Integer
  + getForce(): Integer
  + setForce(Integer)
  + getAttribut(): Integer
  + diminuerInitiative()
  + getSymbol(): String
  + seDeplacer(Integer, Integer)
  + getClasseArmure(): Integer
  + recuperer(Equipement)
  + getPvMax(): Integer
  + getNom(): String
  + setArmure(Armure)
  + subirAttaque(Integer, String)
  - infligerDegats(Personnage, Integer)
  - getDegats(): Integer
  - choisirEquipement(ArrayList<Equipement>): Equipement
  - choisirEquipementEquiper(): Equipement
  - getEquipement(TypeEquipement): ArrayList<Equipement>
  - choisirSort(): Sort
}
class Pion {
  - m_symbol: String
  - m_y: Integer
  - m_x: Integer
  + <<create>> Pion(Integer, Integer, String)
  + <<create>> Pion(Pion)
  + getY(): Integer
  + getX(): Integer
  + toString(): String
  + getDistance(Integer, Integer): Integer
  + setPosition(Pion)
  + getDistance(Pion): Integer
  + equals(Pion): boolean
  + setPosition(Integer, Integer)
}
abstract class Race <<abstract>>{
  - m_nom: String
  - m_pv: Integer
  - m_force: Integer
  - m_dexterite: Integer
  - m_vitesse: Integer
  + <<create>> Race(String, Integer, Integer, Integer, Integer)
  + getVitesse(): Integer
  + getDexterite(): Integer
  + getForce(): Integer
  + toString(): String
  + getPv(): Integer
}
class Rapiere extends Arme{
  + <<create>> Rapiere()
}
class Roublard extends Classe{
  - m_equipements: ArrayList<Equipement>
  + <<create>> Roublard()
}
class SlotArme implements SlotEquipable{
  - m_perso: Personnage
  + <<create>> SlotArme(Personnage)
  + set(Equipement)
  + get(): Equipement
}
class SlotArmure implements SlotEquipable{
  - m_perso: Personnage
  + <<create>> SlotArmure(Personnage)
  + get(): Equipement
  + set(Equipement)
}
interface SlotEquipable << interface >> {
  + set(Equipement)
  + get(): Equipement
}
abstract class Sort <<abstract>>{
  - m_nom: String
  + <<create>> Sort(String)
  + <<abstract>> lancer(ArrayList<Personnage>): boolean
  + toString(): String
}
abstract class Symbols <<abstract>>{
  + {static} CASE_VIDE: String
  + {static} CASE_EQUIPEMENT: String
  + {static} CASE_OBSTACLE: String
}
enum TypeCase << enumerate >> {
  DEPLACEMENT
  AJOUT
}
enum TypeEquipement << enumerate >> {
  ARMURE
  ARME
}
enum TypePersonnage << enumerate >> {
  MONSTRE
  JOUEUR
}
@enduml
Affichage        ->  Anglais         : "«create»"
Affichage        ->  Francais        : "«create»"
Affichage       "1" *-> "m_langue\n1" Langue
BoogieWoogie     ->  Pion            : "«create»"
Classe          "1" *-> "m_equipements\n*" Equipement
Classe          "1" *-> "m_sorts\n*" Sort
Clerc            ->  Arbalete        : "«create»"
Clerc            ->  ArmureEcailles  : "«create»"
Clerc           "1" *-> "m_equipements\n*" Equipement
Clerc            ->  Guerison        : "«create»"
Clerc            ->  Masse           : "«create»"
Clerc           "1" *-> "m_sorts\n*" Sort
Donjon           ->  Arbalete        : "«create»"
Donjon           ->  CasePlateau     : "«create»"
Donjon           ->  CotteDeMailles  : "«create»"
Donjon           ->  DemiPlate       : "«create»"
Donjon           ->  Donjon          : "«create»"
Donjon           ->  EpeeLongue      : "«create»"
Donjon          "1" *-> "m_equipements\n*" Equipement
Donjon           ->  Masse           : "«create»"
Donjon           ->  Monstre         : "«create»"
Donjon          "1" *-> "m_personnages\n*" Personnage
Donjon           ->  Pion            : "«create»"
EffetsStandards "1" *-> "ARMURE_LOURDE\n*" Effet
EffetsStandards  ->  EffetForce      : "«create»"
EffetsStandards  ->  EffetVitesse    : "«create»"
Equipement      "1" *-> "m_effets\n*" Effet
Equipement       ->  Pion            : "«create»"
Equipement      "1" *-> "m_pion\n1" Pion
Equipement      "1" *-> "m_type\n1" TypeEquipement
GestionDonjon    ->  Arbalete        : "«create»"
GestionDonjon    ->  Arc             : "«create»"
GestionDonjon    ->  ArmureEcailles  : "«create»"
GestionDonjon    ->  Baton           : "«create»"
GestionDonjon    ->  CasePlateau     : "«create»"
GestionDonjon    ->  CotteDeMailles  : "«create»"
GestionDonjon    ->  DemiPlate       : "«create»"
GestionDonjon    ->  Epee2Mains      : "«create»"
GestionDonjon    ->  EpeeLongue      : "«create»"
GestionDonjon    ->  Fronde          : "«create»"
GestionDonjon    ->  Harnois         : "«create»"
GestionDonjon    ->  Masse           : "«create»"
GestionDonjon    ->  Monstre         : "«create»"
GestionDonjon    ->  Rapiere         : "«create»"
Guerrier         ->  Arbalete        : "«create»"
Guerrier         ->  CotteDeMailles  : "«create»"
Guerrier         ->  EpeeLongue      : "«create»"
Guerrier        "1" *-> "m_equipements\n*" Equipement
Initialiseur     ->  Jeu             : "«create»"
Jeu              ->  Clerc           : "«create»"
Jeu              ->  Elf             : "«create»"
Jeu              ->  Guerrier        : "«create»"
Jeu              ->  Halfelin        : "«create»"
Jeu              ->  Humain          : "«create»"
Jeu             "1" *-> "m_joueurs\n*" Joueur
Jeu              ->  Joueur          : "«create»"
Jeu              ->  Magicien        : "«create»"
Jeu              ->  Nain            : "«create»"
Jeu              ->  Roublard        : "«create»"
Joueur           ->  Arme            : "«create»"
Joueur           ->  Armure          : "«create»"
Joueur          "1" *-> "m_classe\n1" Classe
Joueur          "1" *-> "m_race\n1" Race
Magicien         ->  ArmeMagique     : "«create»"
Magicien         ->  Baton           : "«create»"
Magicien         ->  BoogieWoogie    : "«create»"
Magicien        "1" *-> "m_equipements\n*" Equipement
Magicien         ->  Fronde          : "«create»"
Magicien         ->  Guerison        : "«create»"
Magicien        "1" *-> "m_sorts\n*" Sort
Monstre          ->  Arme            : "«create»"
Monstre          ->  Armure          : "«create»"
Personnage      "1" *-> "m_arme\n1" Arme
Personnage      "1" *-> "m_armure\n1" Armure
Personnage      "1" *-> "m_inventaire\n*" Equipement
Personnage       ->  Pion            : "«create»"
Personnage      "1" *-> "m_pion\n1" Pion
Personnage       ->  SlotArme        : "«create»"
Personnage       ->  SlotArmure      : "«create»"
Personnage      "1" *-> "m_sorts\n*" Sort
Personnage      "1" *-> "m_type\n1" TypePersonnage
Roublard         ->  Arc             : "«create»"
Roublard        "1" *-> "m_equipements\n*" Equipement
Roublard         ->  Rapiere         : "«create»"
SlotArme        "1" *-> "m_perso\n1" Personnage
SlotArmure      "1" *-> "m_perso\n1" Personnage
@enduml
